\begin{comment}
%%% 
%%%   ***　参考文献追加 ***　ここから
%%% 
  \cite{hohno:monogramming1}
  \cite{misc:POSIXdocs1}
  \cite{matsuura:POSIXcentrics}
  \cite{misc:WSL_arch_overview}
  \cite{misc:firmata}
  \cite{misc:kotoriotoko}
  %%% \cite{misc:arduino}
  %%% \cite{misc:RaspberryPi}
  %%% \cite{misc:WSLbugs}
  %%% 
%%%   ***　参考文献追加 ***　ここまで
%%%   
%%%   *** 要追加事項 ***　ここから
%%% 
%%%   関連研究：Firmata
%%% 
%%%   本文：実例
%%% 
%%%   今後：XBee が意外と使えるかも
%%% 
%%%   *** 要追加事項 ***　ここまで
%%% 
%%%   （松浦さん，森先生への連絡事項）
%%% 以下，句読点の統一は行なっていません．LaTeXにしてから一括変換します．
%%% 今回の報文は，ものグラミング2の事実を記録することだと思っています．なので，説明ばかりですが，しかたありません．
%%% 
%%% いよいよ時間がなくなってきたので，このファイルをそのまま enTexします．
%%% 手元にある，もう一方の（RaspbarryGate/Guardianの）論文のTeX環境できれいにビルドできているので，スタイルファイルなどはそのまま使い，このファイルをそのまま取り込んで（テキスト形式でダウンロードして）ビルドしたいと思います．（2019-02-05 19:48 大野）

%%% 最終的にはこの（↓）環境を使います．
%%% https://drive.google.com/drive/folders/1p8s6UsGvDbt0iROQMY5qt_qcNTXuX1re?usp=sharing

%%% ビルド方法：
%%% このファイルをテキストで保存する．
%%% $ nkf -w このファイル.tex > main-utf8.tex
%%% $ edit main-utf8.tex  # 最後にくっついているコメントを削除あるいは直上にある \begin{comment}..\end{comment} の中に入れる
%%% $ platex iot44-monogramming2.tex
%%% 適宜繰り返し実行し，
%%% $ dvipdfmx  iot44-monogramming2.dvi 
%%% これで  iot44-monogramming2.pdf が得られる
%%% 
＝＝＝コメントここまで＝＝＝

以下の目次は生きています．
「概要」の左側をクリックすると目次を再生成できます．

（目次）
概要（90%）        2
1. はじめに（80%）        3
2. 背景（85%）        3
3. ものグラミング（80%）        5
3.1 ものグラミング1        5
3.2 ものグラミング2        6
3.3 ものグラミング1とものグラミング2との比較        8
3.4  多機能・高性能マイコンに全てを担当させる方法との比較        8
4. 実装（60%）        9
4.1 ものグラミング環境        10
4.2 ものグラミングの実例        11
5. 普及啓発（50%）        11
5.1 日本での実践        11
5.2 カナダでの実践        12
5.3 インドでの実践        12
6. 評価と今後の展開（80%）        12
7. おわりに（80%）        13
謝辞（100%）        13
参考文献（0%）        14

\end{comment}

\title{
ものグラミング2 - 諸機能の選択と集中を徹底したPOSIX中心主義に基づくIoT開発方式の提案\small{(誤字脱字等修正/参考文献追加版)}
}

\etitle{
Monogramming2 - IoT Development Method Based on POSIX Centricism
}

\affiliate{Kanazawa}{金沢大学 総合メディア基盤センター\\
Kakuma-machi, Kanazawa, Ishikawa 920-1192, Japan}
\affiliate{USP}{ユニバーサル・シェル・プログラミング研究所}

\author{大野 浩之}{Hiroyuki Ohno}{Kanazawa}[hohno@staff.kanazawa-u.ac.jp]
\author{松浦 智之}{Tomoyuki Matsuura} {USP}[richmikan@richlab.org]
\author{森 祥寛}{Yoshihiro Mori}{Kanazawa} [mori4416@staff.kanazawa-u.ac.jp]

%% 大野浩之（金沢大学）・松浦智之（USP研究所）・森 祥寛（金沢大学）

\begin{comment}
概要（90%）
\end{comment}

\begin{abstract}
著者らが提案する「ものグラミング」は，ものづくりのためのプログラミング方式と当該方式を用いた実装環境である．今般，これまでの「ものグラミング」を見直し，IoT環境への適用も念頭に置いて「マイクロコントローラとPOSIXコンピュータのそれぞれが担当する機能」の選択と集中を行った．その結果得られたIoT開発環境は，単純ながら拡張性に富み，安全と安心の確保も容易になった．本報ではこの新しいものグラミング方式（ものグラミング2）の考え方を述べ，既存の他方式との比較，今後の課題，さらにすでに国内外で展開している普及啓発活動について報告する．
\end{abstract}

\begin{jkeyword}
IoT, ものづくり, ものグラミング, Raspberry Pi, Arduino, POSIX, POSIX中心主義
\end{jkeyword}


\begin{eabstract}
  The ``Mono-gramming'' is a programming and implementation method for MAKERs who are developing new devices using microcontrollers. 
  This time, we reviewed the method, and we chose the selection and concentration of functions to be provided.
  The new method separates the role for microcontrollers and POSIX based computers. It is simple, easy to extent, safe and secure. We name the method  ``Mono-gramming 2''. In this report, we discuss abount the benefit of the method, future plans, deployment in Japan and other countries.
\end{eabstract}
    
\begin{ekeyword}
IoT, Mono-gramming, Monogramming, Raspberry Pi, Arduino, POSIX, POSIX centrics approach
\end{ekeyword}

\maketitle

\begin{comment}
1. はじめに（80%）
\end{comment}
\section{はじめに}
\label{sec:01introduction}

「ものグラミング」は，著者らが提唱し研究開発と普及啓発に取り組んでいる「ものづくり」に適したプログラミング手法である\cite{hohno:monogramming1}．
本報では「ものグラミング」の第二世代にあたる「ものグラミング2」について，その背景にある考え方，それに基づく実装，普及啓発活動の現状を報告する．

「ものグラミング2」の詳細は3節で述べるが，その特徴を POSIX\cite{misc:POSIXdocs1}系OSのシェルにおける1行プログラム（ワンライナー）で表現すると以下のようになる．\\

{\tt
\begin{verbatim}
$ cu -l /dev/ttyX < NP | script1.sh \
     | cu -l /dev/ttyY | script2.sh > NP
\end{verbatim}
}

\noindent\\ 
ここで，NPは mkfifo コマンドで作成した名前付きパイプ，cu は古くはUUCP時代からPOSIX系OSで利用されている，シリアルポートを介した通信を提供する cuコマンド，scriptN.sh は任意のシェルスクリプトである．また，このワンライナーを動かすコンピュータは少なくとも二つのシリアルポート(ttyXとttyY)を持つ必要があり，各シリアルポートには．単機能のマイクロコントローラ（以下，組み込みマイコンあるいは単にマイコンと表記，たとえば Arduino）
%%%\cite{misc:arduino}
が接続され，センサを使って計測したりアクチュエータを使って操作しているものとする．
\begin{comment}
%%% 複数台（ここでは二台）の単機能のマイクロコントローラ（マイコン，たとえば Arduino）がUSB接続されているものとする．
\end{comment}

このワンライナーにより，
(1) 最初の cu コマンドによって /dev/ttyX から読み出された1台目のマイコンが生成したデータは，script1.sh での処理を経て 二つ目の cu コマンドによって /dev/ttyY に到達し 2台目のマイコンに送られる．
(2) 2台目のマイコンは受け取ったデータをもとに何らかの動作を行い，その結果をワンライナーが動く機器に送り返す．
(3) 送り返されたデータは二つ目の cu コマンドによって /dev/ttyY から読み出され，script2.sh での処理を経て名前付パイプ NP に出力される．
(4) 名前付きパイプの反対側は，最初の cu コマンドの入力に繋がっているので，最終的には /dev/ttyX に到達し，/dev/ttyX に接続されたマイコンに送られる．
(5) データをは受け取った1台目のマイコンはデータをもとに何らかの動作を行い．ワンライナーが動く機器に結果を送り返し (1) に戻る．

すなわち，このワンライナーにより，ttyX に接続された装置と ttyY に接続された装置とは，script1 と script2 を介して双方向接続している．

\begin{comment}
%%% この時，上記のワンライナーは， (1)センサを搭載したArduinoからセンサの情報を受け取り，(2) これをscript1 で処理し，(3) その結果をアクチュエータを搭載したArduinoに送ってアクチュエータを動かし，(4)アクチュエータを動かした結果をマイコンから受け取り， (5) さらに script2 で処理して，(6) 1台目のArduino に処理結果を戻すというフィードバックループを構成している．
\end{comment}

本報では，このワンライナーで特徴づけられる「ものグラミング2」が，ものづくりに適した簡単に素早くかつ安全なプログラミングを提供することを示す．

\begin{comment}
2. 背景と関連研究（85%）
\end{comment}
\section{背景と関連研究}
\label{sec:02background}

\subsection{背景}
「ものグラミング」は，もともとは趣味で電子工作を楽しむものづくり愛好家に，自分の作品とクラウド上のサービスを連携させるプログラムを簡単に手早くかつ安全に構成してもらうことを念頭に著者のひとり（大野）が提案した手法である．

趣味で行うものづくりで製作するものは作品であって工業製品ではないのが普通なので，ハードウェアの信頼性や安全性，さらに製品寿命といった問題についてはあまり配慮しない場合が多い．
しかし，業務で製品化する場合には設計開始当初から信頼性や安全性に十分配慮しなければならない．
この違いのため，趣味のものづくりで行われているものづくりの方法論は，業務での製品化には通用しないことが少なくない．
一方，ソフトウェアの構成方法は，安全安心なプログラムが短時間で簡単に生み出せるのなら，電子工作愛好家向けに提案された手法なのか当初から業務を念頭において生み出されたのかといった違いは問題にならない．
%%% と著者らは考えた．
そこで，「ものグラミング」手法を実際にさまざまな現場で試してみると，趣味のものづくりだけでなく，業務でIoTデバイスを使った装置を短時間で試作したり，実際に運用したりする状況でも有効に機能することに気づいた．

\begin{comment}
%%% もちろん，本報で述べる「ものグラミング」を業務に採用するかどうかは利用者の自由であり，試作段階でのみこの手法を用いて動作を確認した上で，次の段階では他の方法に移るのもよいが，用途によってはこの手法で製品化しても十分実用的である．
\end{comment}

一般論として．ソフトウェアは (1)簡単かつ素早く開発でき，(2)完成後も長期に渡って必要な性能を維持でき，(3)開発後10年あるいは20年という長い時間が経過していても修正が必要になったら即座に修正できることが望ましい．
しかし，実際には時間の経過とともに，開発したソフトウェアを取り巻くOSやミドルウエアやアプリケーションの仕様や実装が変化するため，(2)や(3)の実現は容易ではない．
このような状況の下，テキスト形式のデータ処理を行う分野で(1)から(3)を満たすことに成功したのが，著者の一人（松浦）が主導的に進めている「POSIX中心主義」に基づくプログラミングである\cite{matsuura:POSIXcentrics}．
「ものグラミング」はPOSIX中心主義の影響を強く受けながら生まれた．
そのため，センサから得た情報を処理してクラウド上のサービスに送ったり，クラウド上のサービスからの指示をアクチュエータに渡すといったIoT分野ではありがちな処理を行う際には，POSIX中心主義から極力逸脱しないようにしている．

POSIX中心主義に基づくプログラミングでは，開発効率と処理効率の両立，互換性の増加，インストール・メンテナンスコストの抑制を実現するため，POSIXの仕様から逸脱しないように書かれたシェルスクリプトを用いる．
「ものグラミング」においてもこれに習い，例えばセンサからデータを受けるのであれば，データを受け取った直後からデータ処理は全てPOSIX中心主義に基づいて書かれたシェルスクリプトで行うし，何らかのデータをアクチュエータに送るのであれば，アクチュエータにデータを送る直前までは，POSIXの仕様から逸脱しないように書かれたシェルスクリプトに担当させる．
こうすることで， IoT機器を取り扱うプログラミングでも，これまでPOSIX中心主義で対応してきたデータ処理と同様の高い互換性と長い持続性が確保できる．これが「ものグラミング」の根底にある考え方である．

\begin{comment}
%%% ところで，IoTデバイスを操作する装置には，多機能・高性能な組み込み用マイクロコントローラを使う事例が増えている．近年の32bitマイコンであれば，多数のセンサデータを受け取り，高速で処理した後に WiFiネットワークを介してクラウド上のサービスにTCP/IP で送信したり，クラウドからデータを得て多数のアクチュエータを制御する，といった処理を1台でこなせる場面が増えている．これらのマイコンではもはやアセンブラ言語を直接使うことはなく，場合によってはC言語で書くことすらなく，micro Python のような高機能なスクリプト言語で対応することも稀ではない．しかし，「ものグラミング」で提唱する方法は，ここで言及した方法とは大きく異なり上述のように単機能のマイコンとPOSIX系OSを搭載したコンピュータで対応する．両者の比較については後述する．
\end{comment}


\subsection{用語}

本報における「ものグラミング」以外の重要な用語には以下がある．

\begin{description}
  \item[ものづくり] ものを作ることがものづくりであるが，本報で特段の断りなく「ものづくり」と記した場合には，趣味で行う何かを作る活動であって，かつ電子回路を用い，さらに電子回路中には1台以上の組み込みマイコンが含まれる作品を作る行為を指している．

  \item[POSIX機] POSIX系OSが稼働するコンピュータの総称．Raspberry Pi
のような組み込みコンピュータでもPOSIX系OSが動いていればPOSIX機であるし，Apple社が提供する macOSが動くコンピュータもPOSIX機である．また，Windows10搭載機であって，WSL(Windows Subsystem for Linux)\cite{misc:WSL_arch_overview}
が動いていれば，これもPOSIX機である．\footnote{2019年現在，WSLは他のPOSIX機と異なる挙動を見せることがある．これらのうちのいくつかはWindowsOSのサブシステムであることに起因するが，いくつかは単なる不具合である．不具合は，年に数回のペースで行われている更新を経るごとに改善されている}
もちろん，BSD系UNIXや各種Linuxを搭載したデスクトップパソコンもPOSIX機である．
%% 組み込み機器なのかノートパソコン等なのかの区別が必要な場合には，「POSIX搭載マイコン」「POSIX搭載パソコン」と表記する．

\item[POSIX中心主義] 上述のとおり
  
\item[マイコン・組み込みマイコン] 現代的なマイクロコントローラを搭載した組み込み用コンピュータは，「ものグラミング2」で好んで採用している 8bit系Arduinoと比べるとはるかに多機能・高性能な機種も多い．これらは，単体で WiFi, Bluetooth I2C, SPI, UART 等のインタフェースを持ち，32bit CPUと数MBかそれ以上のメモリを持つ場合がある．一方，Arduino UNO R3 に搭載されている ATmega328PU は8bit CPU で，約30KBのプログラム格納領域と 2KB RAM 領域を持つにすぎない．通信インタフェースも限定的であり，WiFiやBluetooth 等は搭載していないため，拡張シールドを用いない限り実用的な対外通信方式はUARTのみとなる．
\end{description}

これ以外の　OS，通信方式，電子機器に関連する用語は，それぞれの開発者による説明や定義をそのまま受け入れ，改めて定義することなく用いている．

%%% POSIX, UNIX, Linux, maxOS, Windows, WSL(Windows Subsystem for Linux) といったOSを指す用語，Arduino, Raspberry Pi といった機器を示す用語は，

\subsection{関連研究}

POSIX機であるか否かにかかわらず，マイコンとUSBシリアル接続したパソコンからマイコンを制御する方法にはさまざまな方法がある．実用化の域に達し公開されている方法の一つに Firmataがある\cite{misc:firmata}．
Firmata は Arduino をパソコンから制御するため，Arduino にあらかじめ専用のスケッチを書き込んでおき，特定のコマンドを受付可能にしておく．そしてパソコン側ではこの Arduino にコマンドを送ることで，Arduino のアナログ入出力，デジタル入出力を操作する．Firmata はプロトコルが規定され公開されているので，誰でもパソコン上のインタフェースを準備できる．ただし，Firmataではマイコン側はパソコン側の周辺機器になってしまうため，単体でも操作可能な上にマイコンとも連携できるという運用はできない．Firmataが対応していない操作はできないし，プロトコルがバイナリベースなのでテキストベースのプロトコルと比べると効率は多少良いが，開発時の操作性は劣る．


\begin{comment}
3. ものグラミング（80%）
\end{comment}
\section{ものグラミング}
\label{sec:03monogramming}

「ものグラミング」は，著者らが2016年から2017年にかけて研究開発に取り組んだ「ものグラミング1」と2018年から取り組んでいる「ものグラミング2」がある．どちらも「ものづくりのためのプログラミング」であるが，両者は実現方法が異なり，「ものグラミング2」は「ものグラミング1」の後継ではない．よって現時点でも両者とも研究開発続いている．本報は「ものグラミング2」の報告であるため，単に「ものグラミング」と表記した場合は「ものグラミング2」を指す．

\begin{comment}
3.1 ものグラミング1
\end{comment}
\subsection{ものグラミング1}
\label{subsec:3.1}

「ものグラミング1」では，POSIX機に Raspberry Pi を用い，同機の拡張ピンヘッダから利用できる GPIO，UART, SPI, 1-Wire 等を用いてセンサやアクチュエータを利用する形態をとる．
Raspberry Pi の拡張ピンヘッダを使うのはありふれた方法であるが，これらのインタフェースを利用する際にデバイスに直接アクセスするプログラムを書き起こすのではなく，それぞれのI/O方式に対応した基本機能を提供するコマンド（たとえば，I2Cバスを介してデータを読み取る i2cgetコマンド, 同バスを介してデータを書き出すi2csetコマンド，デジタルI/Oピンを制御する　gpioコマンド等）を用意し，これをシェルスクリプトから利用する点に特徴がある．
たとえばI2Cバス上にあるI2Cデバイスのアドレスが 0x36であるセンサの 1番目のデータを読み取る場合にはi2cgetコマンドを用い，以下のようなコマンドを実行するかシェルスクリプトから呼び出す．すると読み出した結果が標準出力に現れる．\\

{\tt \$ i2cget -y 1 0x36 0x01}

\noindent\\ 
ひとたびセンサからのデータがテキスト形式で標準出力に現れれば，あとはシェルスクリプトで必要な処理を施せる．逆方向，すなわちI2Cデバイスにデータを送るi2csetコマンドや，1ビットずつ独立してデジタル入出力を実施する gpio コマンドも同様の使い方をする．

コマンドを介してセンサやアクチュエータにアクセスするこの方法は，処理速度は犠牲になる．この処理速度の低下が問題となるか否かはどのような用途で使うかに依存する．もし数秒ないし数分に一度室内の気温を計測してクラウドにデータをアップロードするといった用途なら，シェルスクリプトからコマンドを起動し，コマンドを介してセンサにアクセスする方式でも処理速度に特段の問題はない．

\begin{comment}
3.2 ものグラミング2
\end{comment}
\subsection{ものグラミング2}
\label{subsec:3.2}

「ものグラミング2」の特徴は，ものづくりのためのプログラミングにおける「適材適所」と「選択と集中」を徹底したことである．このため，センサやアクチュエータを操作する際には，Arduino UNOのようなシンプルな組み込みマイコンを採用し，通常はセンサやアクチュエータの数だけ用意する．そして一つのマイコンにはセンサやアクチュエータのうちの一つだけを接続する．センサを担当することになったマイコンはセンサからの値を読んだらシリアルポートを介してPOSIX機にデータを送る作業だけを行う．アクチュエータを担当することになったマイコンはPOSIX機からデータを受け取ってアクチュエータを動かす作業のみを担当する．なお，いずれのの場合もマイコンとPOSIX機との通信はテキスト形式で行う．POSIX機上でのPOSIX中心主義に基づくデータ処理との親和性を確保するためである．

同じPOSIX機に接続されたセンサやアクチュエータを互いに連携させたり，クラウドを介して他のネットワーク上の他の機材やサービスとも安全かつ確実に連携させるといった高度な機能の実現には，POSIX系OSを搭載したコンピュータを活用し，マイコンには担当させない．%%% どのような機材がPOSIX搭載機かは前述の通りである．
\begin{comment}
%%% としては，たとえば Raspbery Pi のような組み込みを意識した小型コンピュータや，Linux搭載パソコン，macOS搭載機（いわゆるMac），WSL(Windows Subsystem for Linux)を導入した Windows10搭載パソコン等がある．
\end{comment}

POSIX機上で用いるソフトウェアは，POSIX標準コマンド群とこれらを活用するPOSIX中心主義に基づくシェルスクリプト，そして慎重に選んだ少数の新規コマンド類に限定する．「ものグラミング」では，これまでのPOSIX中心主義にもとづくプログラミング同様，ruby や python といった汎用性が高く多くの利用者を獲得している人気のスクリプト言語は原則として用いない．長期にわたる互換性や保守性が保証できないのが理由であるが，やむを得ぬ事情がある場合にもPOSIX中心主義が主張する「交換可能性担保」を実現してから用いる．

通常，センサやアクチュエータは単独で動作が完結することはなく，相互に連携する相手が必要である．
たとえば，温度センサから読み取った温度情報は，液晶表示パネルに表示したり，アクチュエータの操作に反映させたりする．
最近は機能を大幅に向上させた高機能マイコンが安価に利用可能になり，機種によっては1台のマイコンに複数のセンサやアクチュエータを接続した上で，自身も液晶表示器やタッチパネルを搭載し，さらにクラウド上の他の機器やサービスとも WiFi や有線LAN上に確保した TCP/IP通信で連携できる場合が多い．
すなわち，1台で数多くの要求を満たすようなマイコンが普通に存在する．
しかし「ものグラミング2」ではこのような1台の組み込みマイコンで何でも実現するようなことは決して行わない．
「ものグラミング2」の方向はむしろ逆で，「適材適所」「選択と集中」を徹底させるため，仮にセンサが一つしかなくその値を読み取って液晶表示器に表示するだけであっても，単純構成のマイコン2台（温度センサ担当と液晶表示器担当）とPOSIX機1台の合計3台を投入する．
この方法は，POSIX中心主義に基づくこれまでのプログラムの延長にあり，2台のマイコンの動作は，以下の動作を行うだけのきわめて単純なものとなる．

\begin{description}  
\item [・センサ担当のマイコン：] センサの値を読んでシリアルポートに出力する，
\item [・表示器担当のマイコン：] テキスト形式のデータを受け取って液晶表示機に表示する
\end{description}  

現在では，多くのセンサやアクチュエータや表示器は製造者あるいは先行する実装者から動作確認用のサンプルプログラムが Arduino用に提供されていることが多い．上記のプログラムが要求する機能は，サンプルプログラムと同じか多少の改造で実現できる．C言語やC++言語で記述するなら数10行で書き切れる規模である．また，センサや表示器が変更になってもこの程度のプログラムであれば，再実装は容易である．
また，POSIX機の作業は，cuコマンドで一方のttyポートからデータを読み取り，シェルスクリプトを通したのちに，もう一方のttyポートに別のcuコマンドを用いてデータを送るだけである．すなわち以下のワンライナーで実現できる．\\

{\tt
  
\begin{verbatim}
$ cu -l /dev/ttyX | script.sh | cu -l /dev/ttyY
\end{verbatim}

}

\noindent\\ 
シェルスクリプト script.sh は，センサからテキスト形式で得られた値を加工して表示器を担当するマイコンが要求する形式のテキストデータに変換する．
テキスト処理はシェルスクリプトの得意とする分野であり，変更は容易である．たとえば，センサが温度センサであって，表示器に摂氏（℃）の温度を表示していたとする．これを華氏（Ｆ）表示に変更したい場合も，マイコン上のプログラム変更は不要で，シェルスクリプトの変更だけでよい．現在時刻も表示したい，表示時刻を日本時間ではなく指定した地域の時間帯を用いたい，得られた気温を他の機材にMQTTを介して送りたい，といった要求にもシェルスクリプトの変更だけで対応できる．そしてPOSIX機であれば，これらの変更を遠隔地からSSHを介して安全に実施することも容易である．

さらに，安全性について考えるとこの方法には以下の特長がある．
組み込みマイコンに必要な機能は限定的である．このためソースコードは短く見通しがよい．C言語やC++言語で20行程度で完結し，ソースコード全体がパソコンの1画面に収まることも珍しくなくソースコードレビューが容易に行える．プログラムはシリアルポートとテキストをやり取りするだけなのでセキュリティ上の脅威が入り込む余地が全くない．ネットワークを介した他の機材との通信は，暗号化等の安全確保を含めてすべてPOSIX機が担う．実際には Raspberry Piのような小型のカードサイズのコンピュータを用いることが多いが，Raspberry Pi は小さくても POSIX機である．POSIX機であれば，OSの基本機能や多種多様なライブラリやサービスの安全確保については常に議論されており，問題が見つかれば直ちに議論され修正が配布される．組み込みマイコンは独自の拡張回路や素子が接続される独自の機材となることが多く，その安全確保は開発者以外は対応できないことがある．一方，POSIX機は，汎用的なコマンドを組みあわせたシェルスクリプトをPOSIXという汎用的なOSの上で動かすだけなので，組み込みマイコンと異なり，開発者以外とも情報交換可能な汎用的な環境の汎用的な安全確保の問題となる．
マイコンとPOSIX機で担当する機能を分け，それぞれに得意な作業に特化させるのが「ものグラミング2」における選択と集中であり，これが情報セキュリティ上の安全確保に寄与している．



%%%　ここに追記

このように，センサの値を液晶表示機に表示するために3台のコンピュータを投入する方法は一見すると高コストに思えるが，高い柔軟性と安全性を確保できる．
さらにこの方法は POSIX中心主義に沿っているため，20年以上先であっても動作し，容易に改修でき，安全性であることを担保できる．
したがって，中長期的な視点で見れば無駄でも高コストでもなく，保守性に優れた性能価格比に優れた方法である．

あらためて，図1に上記の例が提供する標準的な接続形態を示し，「ものグラミング2」における標準的な実装についてまとめる．

\begin{comment}
%%% {\tiny
%%%   ┌──────────┐シリアル接続┌──────────┐シリアル接続┌──────────┐
%%%   │簡易なマイコン │＝＝＝＝＝＞│ POSIX機   │＝＝＝＝＝＞│ 簡易なマイコン│
%%%   │ (例：Arduino)   │ （USB） │ (PCやラズパイ)│  (USB)  │  (例：Arduino) │
%%%   └──────────┘      └──────────┘      └──────────┘
%%%  センサ等からデータを      テキスト処理に専念     テキストを得てアクチュ
%%%  得てテキストを出力                     エータを駆動
%%% }
%%% （図1：ものグラミング2における標準的な機器構成）
%%% 
\end{comment}
\begin{figure}[h]
\centering
\includegraphics[width=8cm]{figs/fig1.eps}
\caption{ものグラミング2における標準的な機器構成}
\end{figure}

この図では，POSIX機を中心に左右に「簡易なマイコン」を配置してUSB接続している．情報の流れは左から右への一方向である．

この図が意味することは以下の3点である．

\begin{enumerate}
  \item センサを接続した左側のマイコンは，センサから情報を得てこれをテキスト形式でPOSIX機に情報を送る．
  \item POSIX機は左側のマイコンから受け取ったテキスト形式の情報を処理して右側のマイコンに送る．これはPOSIX機が得意とするテキスト処理である．
  \begin{description}
    \item[例:] 「温度がある値を超えたらモータを動かす」のであれば，左側のマイコンから受け取ったテキストを分析して条件が成立したら，モータを動かす指示をテキスト形式で生成して右側のマイコンに送る．
  \end{description}
  \item アクチュエータを操作するための指示をテキスト形式で受け取った右側のマイコンは，実際にアクチュエータを操作する．
\end{enumerate}

これを本報冒頭のワンライナーと同じ記法で表現したのが以下となる．これは3つのコマンドがパイプで接続されており，図1における，左側のマイコン（POSIX機とシリアル接続している），POSIX機，右側のマイコン（同）という並びに対応している．これは前述のセンサと液晶表示を用いた事例と全く同じ内容のワンライナーであり，異なるのは標準入力からテキストを読み込んで標準出力にテキストを出力する script.sh の中身だけである．\\

{\tt
  
\begin{verbatim}
$ cu -l /dev/ttyX | script.sh | cu -l /dev/ttyY
\end{verbatim}

}

\noindent\\ 
図1におけるマイコンはPOSIX機とシリアル接続しているが，通信は左側から右側への一方向である．
こうすることで，左側のマイコンはシリアルポートにデータを書き出すだけで読み込まず，右側のマイコンはシリアルポートからデータを読み込むだけで書き出さない．
これによりどちらのマイコンのプログラムもとても簡素になる．
しかし，2台のマイコンがそれぞれPOSIX機を介して双方向通信したい場合もコマンドラインはそれほど複雑にはならない．
図1における2台のマイコンの通信が双方向になると，センサを担当するマイコンは計測したデータをPOSIX機に送り出すだけでなく，POSIX機から指示を受け取れるようになり，計測間隔や前処理の有無等を変更可能になる．
アクチュエータを担当するマイコンは，POSIX機からの指示に従ってアクチュエータを動かすだけでなく，動かした結果をPOSIX機に送ることができ，POSIX機はアクチュエータの動作結果を把握できる．この双方向性を実現するスクリプトでは /dev/ttyX の双方向通信には script1.sh を /dev/ttyY の双方向通信には　とscript2.sh を用意し，script1.sh と script2.sh はプロセス間通信させる．
script1.sh, script2.sh はシェルスクリプトなので，内部で様々なコマンドを起動でき，プロセス間通信は容易に実現できる．
すなわち データの流れは以下になる．\\

\begin{comment}
\end{comment}

{\tt

\begin{verbatim}
/dev/ttyX → script1.sh →  /dev/ttyY
/dev/ttyY → script2.sh →  /dev/ttyX
script1.sh ←→ script2.sh
\end{verbatim}

}

\noindent\\ 
これをさらに整理し，以下の流れにしたのが本報冒頭のワンライナーである．\\

{\tt
\begin{verbatim}
/dev/ttyX → script1.sh →  /dev/ttyY
/dev/ttyY → script2.sh →  /dev/ttyX
\end{verbatim}
}

\noindent\\ 
この場合，/dev/ttyX から script1.sh を経て /dev/ttyY に向かう流れは，本稿で繰り返し示したように パイプを使って以下のように簡単に書けるが，同時に /dev/ttyYから /dev/ttyX へ向かう逆方向の流れの記述は一工夫必要である．\\


{\tt
  
\begin{verbatim}
$ cu -l /dev/ttyX | script1.sh | cu -l /dev/ttyY
\end{verbatim}

}

\noindent\\ 
「ものグラミング2」では，あらかじめ mkfifo コマンドで名前付きパイプ（ここではパイプ名をNPとするが実際には適切なフルパス名を用いる）を用意した上で 以下のようにしている．

\begin{enumerate}
\item cu コマンドで /dev/ttyY から読み込んだデータは通常のパイプで script2.sh の標準入力に送る
\item script2.sh の出力は通常のパイプではなく名前付きパイプに送る．
\item /dev/ttyXを担当する cu コマンドの標準入力が上記の名前付きパイプから読み込むことで script2.sh の出力を /dev/ttyX に送り込む
\end{enumerate}

\noindent\\ 
この部分を記述すると以下になる．\\

{\tt
  
\begin{verbatim}
$ cu -l /dev/ttyY | script2.sh > NP
$ cu -l /dev/ttyX < NP
\end{verbatim}

}

\noindent\\ 
これらをまとめたのが本報冒頭のワンライナーであり，「ものグラミング2」の特徴を表現している．\\

{\tt
  
\begin{verbatim}
$ cu -l /dev/ttyX < NP | script1.sh \
     | cu -l /dev/ttyY | script2.sh > NP
\end{verbatim}

}

\section{比較}
\label{sec:3x}

\begin{comment}
3.3 ものグラミング1とものグラミング2との比較
\end{comment}
\subsection{ものグラミング1とものグラミング2との比較}
\label{subsec:3x.1}

「ものグラミング2」の「ものグラミング1」に対する主たる長所と短所を挙げる．

\begin{description}
\item[長所] 「ものグラミング1」では，全てのセンサやアクチュエータをPOSIX機に接続するが，センサやアクチュエータの中には，POSIX機よりマイコンに接続した方が効率よく接続できる，あるいはマイコンでないと接続できない場合がある．
\item[長所] センサやアクチュエータなど，実機に必須な機能はマイコンに，通信やセキュリティといった汎用的な機能はPOSIX機にといった役割分担が明確にでき，それぞれの機材はそれぞれの役割に集中できる．
\item[短所] POSIX機単体では対応できず必ずセンサやアクチュエータの数だけArduino UNOのようなマイコンを必要とする．しかしこの点については，直上の長所を得るために必要である．よって本件は大きな欠点ではない．
\end{description}

\begin{comment}
%%% メモ：
%%% ・「選択と集中」の徹底
%%%  ・「入」「出」「表」「操」は Arduino UNO のような単機能（OSを持たない）マイコンに担当させる．
%%%  ・基本は１機能/マイコン
%%%  ・マイコンと外部とのやりとりは UART経由．フォーマットはテキスト
%%%  ・マイコンが入出力するテキスト情報は POSIX機で処理
%%%  ・POSIX機上ではPOSIX中心主義に基づくシェルスクリプトでテキストを処理
\end{comment}

\begin{comment}
  3.4  多機能・高性能マイコンに全てを担当させる方法との比較
  %%%[a][b][c][d][e]
\end{comment}
\subsection{多機能・高性能マイコンに全てを担当させる方法との比較}
\label{subsec:3x.2}

IoTデバイスを操作する装置には，多機能・高性能な組み込み用マイクロコントローラを使う事例が増えている．近年の32bitマイコンであれば，多数のセンサデータを受け取り，高速で処理した後に WiFiネットワークを介してクラウド上のサービスにTCP/IP で送信したり，クラウドからデータを得て多数のアクチュエータを制御する，といった処理を1台でこなせる場合が少なくない．これらのマイコンではもはやアセンブラ言語を直接使うことはなく，場合によってはC言語で書くことすらなく，micro Python のような高機能なスクリプト言語で対応することがある．しかし，「ものグラミング」では，単一のマイコンになんでも詰め込むのではなく，単機能のマイコンとPOSIX系OSを搭載したコンピュータを組み合わせて対応する．

この比較では，ものグラミング方式に多くの長所がある．

\begin{description}

  \item[長所] マイコンが単機能なためソフトウェアも単純になる
  \begin{itemize}
    \item 単純なプログラムなのでセキュリティ上の問題が生じうる箇所がほとんどない
    \item 単純なプログラムなのでソースコードの全貌を用意に把握できる
    \item 当該装置に機能の追加・改修が生じた場合，POSIX機側の改修で対応できることが多い
    \item センサやアクチュエータは Arduino 向けのサンプルコードを用意していることが多い．このコードはそのままあるいは最小の修正で「ものグラミング」用に活用できる．
%%   \begin{itemize}
%%     \item これが，1センサ/Arduino, 1アクチュエータ/Arduino を強く推奨する理由
%%    \end{itemize}
    \item 将来，プログラムを改修しようとした際，もとになるプログラムが見つけられなくても，同等のスケッチを再現することは容易
  \end{itemize}

 \item[長所] クラウドとの通信を安全確実に行う部分はPOSIX機が基本機能を組み合わせて対応する
 \begin{itemize}
 \item 汎用のOSなのでセキュリティの確保が実現しやすい
 \end{itemize}

 \item[短所] POSIX機あるいはマイコン単体では対応せず必ずセンサやアクチュエータの数だけArduino UNOのような単機能のマイコンを必要とする．
\end{description}

総じて，「ものグラミング」においては，プロジェクトに依存する部分，あるいは固有の素子の依存する部分は単機能のマイコンに，1マイコンあたり1機能（あるいは1素子）で押し込めてしまい，それ以外は，POSIX機上の汎用的なテキスト処理として対応する．これによって，機能の選択と集中を実現し，POSIX中心主義に基づいたプログラミングを可能にする．その結果，安全と安心と長期運用性を確保する．

\begin{comment}
4. 実装（60%）
\end{comment}
\section{実装}
\label{sec:04implementation}

「ものグラミング2」はPOSIX中心主義に極力従うので，シェルスクリプトを書く際に利用できるコマンドも限定される．

\begin{comment}
4.1 ものグラミング環境
\subsection{ものグラミング環境}
\label{subsec:4.1}
\end{comment}

マイコンが生成した文字列をPOSIX機がシリアルポートを介して受け取る際には cu コマンドを用いる．cuコマンド自体はPOSIXが規定するコマンドではないが，UUCPによる組織間通信が全盛だった1980年代前半から存在し，大きな変更は加えられていないためPOSIX系OSであれば仕様や挙動の違いはない．またPOSIX機が生成した文字列をマイコンに送る際にも cu コマンドを使う．すなわちcuコマンドは「ものグラミング2」におけるPOSIX機とマイコンを繋ぐ唯一のインタフェースである．

POSIX中心主義では，非POSIXコマンドを使う場合には，交換可能性担保が必要である．
「ものグラミング2」では必須となるcuコマンドが非POSIXコマンドに該当する．

cuコマンドは重要な役割を担うが，もともと遠隔地にあるPOSIX機にアクセスするためのコマンドであるため，「ものグラミング」では不要な機能も多い．したがって，「ものグラミング」にとって必須の機能だけを実装した，cuコマンドより大幅に小さくしたコマンドを実装することは検討に値する．なお，既存のオープンソースなフリーソフトウェアの中では，jerm が cu コマンドの代替になる．jerm は余計な機能がなく，C言語で書かれており，ソースコードの規模は cu の数分の一である．このjermによって，cuコマンドの交換可能性が担保される．

POSIX機上でテキストデータを処理するシェルスクリプト内でもっとも利用頻度が高いのは awk コマンドである．awk はPOSIXコマンドである．

シェルスクリプトでの処理を終えてネットワーク上にデータを送る場合やその逆のには，ncコマンド（netcatコマンド）やmosquitto コマンド群（MQTTクライアント）を利用する．これらはPOSIXコマンドではないが交換可能性担保は容易である．

この他，頻繁に利用するコマンドには，本報著者の松浦が開発し普及啓発中の，標準入力から読み込んだ文字列をツイッターに送る（またはその逆を行う）シェルスクリプト群の kotoriotoko（小鳥男）\cite{misc:kotoriotoko}，大野が開発中の Gmailからメールを送出する tegamiotoko（手紙男）等がある．

\begin{comment}
%%% cuコマンドには多数のコマンドラインオプションがあり，設定ファイルにも数多くの設定を記述できるが，「ものグラミング2」で使うのは，シリアルポートを指定する -l オプション，回線速度を指定する -s の二つだけが必須である．（脚注：OSによっては偶数パリティを明示的に指定しなければならない場合もあったが，当該OSで必ず必要というわけでもなかった．このため偶数パリティを指定する -e オプションは必須ではなく現時点では状況に応じて付与するという指示にしている）
\end{comment}

\begin{comment}

%%% XXX20190417 %%%　一時的に節をまるごとコメントアウト  
  
%% \begin{comment}
4.2 ものグラミングの実例
%% \end{comment}
\subsection{ものグラミングの実例}
\label{subsec:4.3}

%%% XXX20190417 %%% ・（初級編1の内容相当をここにコピペして解説（要15分？））

%%% XXX20190417 %%% ・（初級編2の内容相当をここにコピペして解説（要15分？））

%%% XXX20190417 %%% ・上記二つをまとめる文（要15分？））
\end{comment}

\begin{comment}
5. 普及啓発（50%）
\end{comment}
\section{普及啓発}
\label{sec:05deployment}

これからIoT分野でプログラミングを行う者に「ものグラミング2」の特徴と有効性を伝えることは重要だと考え，普及啓発活動を開始した．この活動は国内だけでなく海外でも実施する方針で，一部は実現している．

\begin{comment}
5.1 日本での実践
\end{comment}
\subsection{日本での実践}
\label{subsec:5.1}

2019年2月現在，日本国内では，大学コンソーシアム石川のいしかわシティカレッジの講義「クラウド時代の「ものグラミング」概論」および金沢大学の学部3年生向け講義「計算科学特論」（いずれも90分15回の講義）で「ものグラミング2」を取り上げ，演習中心に実施している．学生はPOSIX系OSが利用可能なノートパソコンの持参を指示し，マイコン2台とマイコンに搭載するセンサやLEDライト等は講義をする側が用意した．大学コンソーシアム石川での講義は，第二著者の松浦，第三著者の森も参画し，金沢大学の講義では森が参画し，講義の録画を含めた支援を担当した．録画した講義は今後の講義を計画する際の資料として用いている．
%%% [f][g]

\begin{comment}
5.2 カナダでの実践
\end{comment}
\subsection{カナダでの実践}
\label{subsec:5.2}

著者のひとり（大野）は，2018年5月から9月までカナダ国ノバスコシア州立ダルハウジー大学にサバティカル滞在した．滞在中は滞在先の研究室で「ものグラミング2」を実践し，この方法を主に大学院修士課程の学生に普及させるとともに，「ものグラミング」に関する90分の講義を1度実施した．さらに同年11月末から2週間に渡って再び訪問し，滞在中に2日間の「ものグラミングワークショップ」を開催した．
このワークショップは両日ともに約2時間が割り当てられた．参加を希望した約40名の学生を8つのチームにわけ，各自にはノートパソコンを持参させた．初日は，「ものグラミング」に必要な環境構築のための説明と実習，さらに「ものグラミング方式」の具体的な説明に充て，2日目は参加者に実際に操作させた．参加者は，こちらが用意して配布した Arduino とアドオンボードを用い，ノートパソコンから cu コマンドで LED を点滅させたり，kotoriotoko にメッセージを送信することを体験した．
このワークショップそのものは2日間で終了したが，参加チームのうちの一つが後日独自に課題を設定して「ものグラミング方式」に則った作品を作って，報告してきた．報告の時点で著者はすでに帰国していたので，彼らは著者がサバティカル滞在した研究室で実機を用いたプレゼンテーションを行い，著者もビデオ会議システム経由で報告を受けた．当該作品は，2台の Arduino を用い，グループの1名が自宅で飼う猫の餌の消費量をセンサで確認し，適宜 kotoriotoko で報告するというものであった．この作品は，Arduino 側では正味30行程度のスケッチで，またパソコン側では，10数行程度のシェルスクリプトと1行のワンライナーで構成されていた．「ものグラミング方式」が理解され，実際に利用可能であることを理解したことが確認できた．

%%% XXX20190417 %%% （学生の自主的な課題対応，具体的に詳しく（要15分？）） 

   

\begin{comment}
5.3 インドでの実践
\end{comment}
\subsection{インドでの実践}
\label{subsec:5.3}

ダルハウジー大学にサバティカル滞在を開始する2ヶ月前の2019年3月には，インド国ハイデラバード州のインド工科大学ハイデラバード校を訪問した．最大の目的は同所で開催された国際会議において基調講演を行うことであったが，「ものグラミング」については，当該基調講演で言及し，さらに国際会議開催後には大学院生向けのゼミや学部生向けのハンズオンを行なった．ただし，ここで述べた「ものグラミング」は「ものグラミング1」であった．同校には2019年3月以降の再訪を検討している．再訪の際には再び講義やワークショップを行うことになっているが，そこでは「ものグラミング1」ではなく「ものグラミング2」を取り上げる予定である．

\begin{comment}
6. 評価と今後の展開（80%）
\end{comment}
\section{評価と今後の展開}
\label{sec:06evaluation}

「ものグラミング」が，IoTに興味を持つ学生に訴求することはインドでの体験でもその熱心な応答からも感じていたが，カナダでは上記のように学生が自主的に課題を設定して問題解決を図り，報告にくるという大きな反応があった．上述のようにカナダの学生は，「ものグラミング2」をよく理解して問題解決に取り組み解決した．まだ一例ではあるが，「ものグラミング」の有効性が示されたと考えた．これが，引き続き海外でも「ものグラミング」の普及啓発に取り組む契機となった．
一方で，ものづくり等を行ってきていない学生等にとっては，「ものグラミング」に至るまでの前段の知識が不足している場合があり，その不足部分を補うための教育や教材等が必要であった．そこで，今後の取組の1つとして，授業やワークショップ等でスムースに「ものグラミング」を学習し，ものづくりを行えるようにするための教材整備を行うこととした．これら教材は，YouTube等に掲載できるような動画形式で作成することを検討しており，eラーニングや反転学習用教材として使用する．併せて，英語対応等も行い，国内だけでなく英語圏を中心に世界展開を目指す．

\begin{comment}
7. おわりに（80%）
\end{comment}
\section{おわりに}
\label{sec:07conclusion}

本報では，「ものグラミング」の新しい方式となる「ものグラミング2」についてその概要を述べつつ普及啓発活動やそこで得られた知見，今後の展開について述べた．「ものグラミング」は，選択と集中の考え方により，マイコンにはマイコンにしかできない作業をさせ，一般性の高いデータ処理はPOSIX機上のシェルスクリプトで対応させる．これにより，POSIX中心主義に則った高い互換性と長い持続性をIoT機材のプログラミングにも導入できることを示した．\\

\begin{comment}
謝辞（100%）
\end{comment}

\begin{acknowledgment}
本研究を遂行するにあたり，カナダ国ノバスコシア州立ダルハウジー大学コンピュータサイエンス学部の Prof. Sampalli および同教授の研究室の学生からは，「ものグラミング」の有効性について検討する際に多くの示唆を得た．また，ユニバーサル・シェル・プログラミング研究所の當仲寛哲所長をはじめとする同社の研究部門の方々との議論も有益であった．ここに記して感謝したい．
\end{acknowledgment}

\newpage

\begin{thebibliography}{2}

\bibitem{hohno:monogramming1}
  大野,森,北口,中村,松浦,石山,當仲，ものづくりのための「ものグラミング」と実践的教育環境の構築，DICOMO2016，1335-1340, 2016-07.
  
\bibitem{misc:POSIXdocs1}
  What is POSIX?，The Open Group (オンライン)，
  \urlj{https://collaboration.opengroup.org/external/pasc.org/plato/}
  \refdatej{2019-02-04}

\bibitem{matsuura:POSIXcentrics}
  松浦智之,大野浩之,當仲寛哲，ソフトウェアの高い互換性と長い持続性を目指すPOSIX中心主義プログラミング，デジタルプラクティス 8(4)，352-360，2017-10-15．

\bibitem{misc:WSL_arch_overview}
  Seth Juarez，Windows Subsystem for Linux: Architectural Overview (オンライン)，
  \urlj{https://channel9.msdn.com/Blogs/Seth-Juarez/Windows-Subsystem-for-Linux-Architectural-Overview}
  \refdatej{2019-05-22}

\bibitem{misc:firmata}
  Firmata Library
  \urlj{https://www.arduino.cc/en/Reference/Firmata}
  \refdatej{2019-05-22}

\bibitem{misc:kotoriotoko}
  秘密結社シェルショッカー日本支部，恐怖！小鳥男 (オンライン)，
  \urlj{https://github.com/ShellShoccar-jpn/kotoriotoko}
  \refdatej{2019-02-04}

  
\end{thebibliography}
  

\begin{comment}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 参考文献（0%）
%%% （松浦さんのPOSIX論文）
%%% -----
%%% \bibitem{POSIXcentric}
%%% 松浦智之,大野浩之,當仲寛哲，ソフトウェアの高い互換性と長い持続性を目指すPOSIX中心主義プログラミング，デジタルプラクティス 8(4)，352-360，2017-10-15．
%%% -----
%%% 
%%% （Firmata）
%%% 
%%% \bibitem{monogramming1}
%%% へのへのもへじ, いろはにほへと, あいうえお, カキクケコ, 2999-01-01
%%% 
%%% 
%%% （POSIXのページ）
%%% -----
%%% %% POSIXとは何かを参照先にする場合
%%% \bibitem{POSIXdocs1}
%%% What is POSIX?，The Open Group (オンライン)，
%%% \urlj{https://collaboration.opengroup.org/external/pasc.org/plato/}
%%% \refdatej{2019-02-04}.
%%% 
%%% %% POSIXの仕様についてを参照先にする場合
%%% \bibitem{POSIXdocs2}
%%% The Open Group Base Specifications Issue 7, 2018 edition, IEEE Std 1003.1™-2017 (Revision of IEEE Std 1003.1-2008) (オンライン)，
%%% \refdatej{2019-02-04}.
%%% -----
%%% 
%%% （kotoriotokoのページ）
%%% -----
%%% \bibitem{kotoriotoko}
%%% 秘密結社シェルショッカー日本支部，恐怖！小鳥男 (オンライン)，
%%% \urlj{https://github.com/ShellShoccar-jpn/kotoriotoko}
%%% \refdatej{2019-02-04}.
%%% -----
%%% 
%%% 大学コンソーシアム石川いしかわシティカレッジ提供科目「クラウド時代の「ものグラミング」概論」，大野浩之外2名担当，https://www.ucon-i.jp/newsite/city-college/kamoku/2018b/15.pdf（2019年2月4日アクセス確認）
%%% 大学コンソーシアム石川いしかわシティカレッジ提供科目「シェルスクリプト言語論」，大野浩之外1名担当，https://www.ucon-i.jp/newsite/city-college/kamoku/2018b/19.pdf（2019年2月4日アクセス確認）
%%% 
\end{comment}

%% 以下のコメントブロックは，余分なテキストがくっついていた場合にそれらをコメントアウトする目的で使ってください．

\begin{comment}
\end{comment}
